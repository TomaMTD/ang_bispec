import numpy as np
from numba import njit

from param import *

############################################################################# window fct
@njit
def W(x, z0, Dz, normW=1):
    
    res=(0.5+0.5*np.tanh( (x-(z0-Dz/2))/bb))*(0.5+0.5*np.tanh( (-x+(z0+Dz/2))/bb))
    return res/normW


@njit
def tmin_fct(ell, nu_p):
    if (ell > 60):
        tmin = ((1. - np.exp(-0.08405923801793776*ell))*ell**1.0388189966482335)/(\
    16.552260860083162 + ell**1.0388189966482335) + 1./72.* (-(((1. -\
           np.exp(-0.08405923801793776*ell))*ell**1.0388189966482335)/(\
        16.552260860083162+ ell**1.0388189966482335)) + ((1. - np.exp(-0.03269491513404876*ell))*ell**1.0606484271153198)/(\
       86.60472131391394+ell**1.0606484271153198))*np.abs(nu_p.imag)
    else:
        tmin = 0.026189266734847335- 0.04199333649354753*ell + \
               0.01813725076906472*ell**2 - 0.0019512662766506912*ell**3 + \
               0.00011476285973931163  *ell**4 - 4.132495310006262e-6 *ell**5 + \
               9.321216021016041e-8    *ell**6 - 1.2840836892275476e-9*ell**7 + \
               9.874351126449866e-12 *ell**8 - 3.247034458438453e-14*ell**9 +\
               1/91512 *(-4223 *(0.026189266734847335 - 0.04199333649354753*ell + \
               0.01813725076906472*ell**2 - 0.0019512662766506912*ell**3 + \
               0.00011476285973931163 *ell**4 - 4.132495310006262e-6*ell**5 + \
               9.321216021016041e-8 *ell**6 - 1.2840836892275476e-9*ell**7 + \
               9.874351126449866e-12*ell**8 - \
               3.247034458438453e-14*ell**9) - \
            961.*(0.0050534423514964006 - 0.004245361441903382*ell + \
               0.0009644735508629553   *ell**2 - \
               0.000029194973960888548 *ell**3 - \
               1.197268126576586e-7   *ell**4 + 3.9232441693781885e-8*ell**5 - \
               1.3806236786152843e-9  *ell**6 + \
               2.380296810916152e-11  *ell**7 - \
               2.105287890873389e-13  *ell**8 + \
               7.627228092016026e-16  *ell**9) + \
            5184.* (0.014502978209351904- 0.01218174975881159*ell + \
               0.002817970220966578*ell**2 - 0.00011942831975390713*ell**3 + \
               1.223432213234367e-6  *ell**4 + 7.921224590247682e-8 *ell**5 - \
               3.5781997384264233e-9 *ell**6 + \
               6.634225862490053e-11 *ell**7 - \
               6.057230587166174e-13 *ell**8 + \
               2.230575708513619e-15 *ell**9)) *np.abs(nu_p.imag) + \
            1./91512.* (41.* (0.026189266734847335 - 0.04199333649354753*ell + \
               0.01813725076906472*ell**2 - 0.0019512662766506912*ell**3 + \
               0.00011476285973931163*ell**4 - 4.132495310006262e-6 *ell**5 + \
               9.321216021016041e-8  *ell**6 - 1.2840836892275476e-9 *ell**7 + \
               9.874351126449866e-12 *ell**8 - \
               3.247034458438453e-14 *ell**9) + \
            31.* (0.0050534423514964006 - 0.004245361441903382*ell + \
               0.0009644735508629553* ell**2 - \
               0.000029194973960888548* ell**3 - \
               1.197268126576586e-7  *ell**4 + 3.9232441693781885e-8 *ell**5 - \
               1.3806236786152843e-9  *ell**6 + \
               2.380296810916152e-11 *ell**7 - \
               2.105287890873389e-13 *ell**8 + \
               7.627228092016026e-16 *ell**9) - \
            72.* (0.014502978209351904 - 0.01218174975881159*ell + \
               0.002817970220966578*ell**2 - 0.00011942831975390713*ell**3 + \
               1.223432213234367e-6  *ell**4 + 7.921224590247682e-8 *ell**5 - \
               3.5781997384264233e-9  *ell**6 + \
               6.634225862490053e-11 *ell**7 - \
               6.057230587166174e-13 *ell**8 + \
               2.230575708513619e-15 *ell**9)) *np.abs(nu_p.imag)**2
    return tmin


@njit
def myhyp21_basic(a1, a2, b1, z):
    par1=1+0.j
    s=0.j
    i=0.j
    eps=1+0.j
    while(eps.real>1e-10):
        sold=s
        s+=par1
        par1*=(a1+i)*(a2+i)/(b1+i)/(i+1)*z
        eps=np.absolute(sold/s-1.)
        i+=1
    return s

@njit
def mygamma(z):
    q0 = 75122.6331530 + 0.0j 
    q1 = 80916.6278952 + 0.0j 
    q2 = 36308.2951477 + 0.0j 
    q3 = 8687.24529705 + 0.0j 
    q4 = 1168.92649479 + 0.0j 
    q5 = 83.8676043424 + 0.0j 
    q6 = 2.50662827511 + 0.0j
    if (z.real >= 0):  
        p1 = (q0 + q1*z + q2*z**2 + q3*z**3 + q4*z**4 + q5*z**5 +\
           q6*z**6)/(z*(z + 1.) *(z + 2.) *(z + 3.) *(z + 4.) *(z + 5.)* (z + 6.))
        result = p1* (z + 5.5)**(z + 0.5) *np.exp(-z - 5.5)
    else:
        p1 = (q0 + q1* (1. - z) + q2* (1. - z)**2 + q3 *(1. - z)**3 +\
        q4* (1. - z)**4 + q5* (1. - z)**5 +\
        q6 *(1. - z)**6)/((1. - z)* (2. - z)* (3. - z)* (4. - z) *(5. - z) *(6. -\
         z)* (7. - z)) 
        
        p2 = p1 *(1. - z + 5.5)**(1. - z + 0.5)*np.exp(-1. + z - 5.5) 
        result = np.pi/(np.sin(np.pi*z)*p2);
    return result



@njit
def mygammaRatio(z1, z2):

    q0 = 0.0075122633153 + 0.0j
    q1 = 0.0809166278952 + 0.0j
    q2 = 0.363082951477 + 0.0j
    q3 = 0.868724529705 + 0.0j
    q4 = 1.16892649479 + 0.0j
    q5 = 0.838676043424 + 0.0j
    q6 = 0.250662827511 + 0.0j

    result = 1.0 + 0.0j
    for i in range(1, 8):
        result = result*(z2 + i - 1)/(z1 + i - 1);

    result = result*np.exp(z2 - z1)
    p1 = (z1 + 0.5)*np.log(z1 + 5.5)-(z2 + 0.5)*np.log(z2 + 5.5)
    result = result*np.exp(p1);
    z1t = z1/10.0
    z2t = z2/10.0

    p1 = (q0 + q1* z1t + q2 *z1t**2 + q3*z1t**3 + q4*z1t**4 + q5*z1t**5 + q6*z1t**6);
    p2 = (q0 + q1 *z2t + q2 *z2t**2 + q3*z2t**3 + q4*z2t**4 + q5*z2t**5 + q6*z2t**6);

    result = result*p1/p2;
    return result

@njit
def Il(nu_p, z, ell):
    a1, a2, b1 = (nu_p-1.)/2, ell+nu_p/2., ell+3./2.
    res = np.pi**2*2.**(nu_p-1.)*mygammaRatio(ell+nu_p/2.,ell+3./2.)\
    /mygamma((3.-nu_p)/2.)*z**ell*myhyp21_basic(a1, a2, b1, z**2)
    return res

@njit
def hyp21(nu_p, z, ell):
    if z<0.5:
        a1, a2, b1 = (nu_p-1.)/2, ell+nu_p/2., ell+3./2.
        
        res = np.pi**2*2.**(nu_p-1.)*mygammaRatio(ell+nu_p/2.,ell+3./2.)\
        /mygamma((3.-nu_p)/2.)*z**ell*myhyp21_basic(a1, a2, b1, z**2)
    elif z<1:
        t=(1.-z**2)**2/4./z**2
        res=np.pi*z**(-nu_p/2.)*(np.sqrt(np.pi)*mygammaRatio(ell+nu_p/2., ell+2.-nu_p/2.)\
                                 *mygammaRatio(1.-nu_p/2, 3./2.-nu_p/2.)*\
        myhyp21_basic(ell/2.+nu_p/4., nu_p/4.-(ell+1.)/2., nu_p/2., -t)\
        -2.*mygamma(nu_p-2.)*np.cos(np.pi*nu_p/2.)*t**(1.-nu_p/2)\
         *myhyp21_basic(ell/2.-nu_p/4.+1., 1./2.-nu_p/4.-ell/2.,2.-nu_p/2., -t))
    else:
        res=np.pi**2*z**ell*2**(nu_p - 1.)*mygamma(2.-nu_p)\
             /mygamma((3.-nu_p)/2.)**2*mygammaRatio(ell+nu_p/2, 2.+ell-nu_p/2.)
    return res

@njit
def myhyp21(nu_p, t, chi, ell, t1min):
    if t.real>1:
        fact=t**(-nu_p)
        t=1./t
    else:
        fact=1.+0.j

    if t<t1min:
        return 0.j
    else:
        return chi**(-nu_p) * fact * hyp21(nu_p, t, ell)


